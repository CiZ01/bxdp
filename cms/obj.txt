
ubcms.bpf.o:	file format elf64-bpf

Disassembly of section xdp:

0000000000000000 <ubcms>:
;     void *data = (void *)(long)ctx->data;
       0:	61 14 00 00 00 00 00 00	r4 = *(u32 *)(r1 + 0x0)
;     void *data_meta = (void *)(long)ctx->data_meta;
       1:	61 13 08 00 00 00 00 00	r3 = *(u32 *)(r1 + 0x8)
;     if ((void *)(md + 1) > data)
       2:	bf 32 00 00 00 00 00 00	r2 = r3
       3:	07 02 00 00 08 00 00 00	r2 += 0x8
       4:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r4
       5:	3d 24 05 00 00 00 00 00	if r4 >= r2 goto +0x5 <LBB0_2>
;         bpf_printk("md + 1 > data\n");
       6:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x0 ll
       8:	b7 02 00 00 0f 00 00 00	r2 = 0xf
       9:	85 00 00 00 06 00 00 00	call 0x6
      10:	05 00 1b 01 00 00 00 00	goto +0x11b <LBB0_26>

0000000000000058 <LBB0_2>:
      11:	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x4)
;     __u16 lens[4] = {bpf_ntohs(md->len1), bpf_ntohs(md->len2), bpf_ntohs(md->len3), bpf_ntohs(md->len3)};
      12:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
      13:	69 31 02 00 00 00 00 00	r1 = *(u16 *)(r3 + 0x2)
      14:	dc 01 00 00 10 00 00 00	r1 = be16 r1
      15:	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
      16:	6b 1a f8 ff 00 00 00 00	*(u16 *)(r10 - 0x8) = r1
      17:	69 31 04 00 00 00 00 00	r1 = *(u16 *)(r3 + 0x4)
      18:	dc 01 00 00 10 00 00 00	r1 = be16 r1
      19:	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
      20:	6b 1a fa ff 00 00 00 00	*(u16 *)(r10 - 0x6) = r1
      21:	7b 3a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r3
      22:	69 31 06 00 00 00 00 00	r1 = *(u16 *)(r3 + 0x6)
      23:	dc 01 00 00 10 00 00 00	r1 = be16 r1
      24:	6b 1a fe ff 00 00 00 00	*(u16 *)(r10 - 0x2) = r1
      25:	7b 1a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r1
      26:	6b 1a fc ff 00 00 00 00	*(u16 *)(r10 - 0x4) = r1
      27:	b7 06 00 00 00 00 00 00	r6 = 0x0
;     __u32 zero = 0;
      28:	63 6a f4 ff 00 00 00 00	*(u32 *)(r10 - 0xc) = r6
      29:	bf a2 00 00 00 00 00 00	r2 = r10
      30:	07 02 00 00 f4 ff ff ff	r2 += -0xc
;     struct countmin *cm = bpf_map_lookup_elem(&countmin, &zero);
      31:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x0 ll
      33:	85 00 00 00 01 00 00 00	call 0x1
      34:	7b 0a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r0
;     if (!cm)
      35:	15 00 02 01 00 00 00 00	if r0 == 0x0 goto +0x102 <LBB0_26>
      36:	b7 01 00 00 08 00 00 00	r1 = 0x8
      37:	18 03 00 00 4f eb d4 27 00 00 00 00 3d ae b2 c2	r3 = -0x3d4d51c2d82b14b1 ll
      39:	18 04 00 00 87 ca eb 85 00 00 00 00 b1 79 37 9e	r4 = -0x61c8864e7a143579 ll
      41:	b7 09 00 00 04 00 00 00	r9 = 0x4
      42:	b7 02 00 00 00 00 00 00	r2 = 0x0
      43:	05 00 3a 00 00 00 00 00	goto +0x3a <LBB0_4>

0000000000000160 <LBB0_22>:
;     return (h ^ (h >> rshift)) * prime;
      44:	bf 62 00 00 00 00 00 00	r2 = r6
      45:	77 02 00 00 21 00 00 00	r2 >>= 0x21
      46:	af 62 00 00 00 00 00 00	r2 ^= r6
      47:	2f 32 00 00 00 00 00 00	r2 *= r3
      48:	bf 20 00 00 00 00 00 00	r0 = r2
      49:	77 00 00 00 1d 00 00 00	r0 >>= 0x1d
      50:	af 20 00 00 00 00 00 00	r0 ^= r2
      51:	18 02 00 00 f9 79 37 9e 00 00 00 00 b1 67 56 16	r2 = 0x165667b19e3779f9 ll
      53:	2f 20 00 00 00 00 00 00	r0 *= r2
      54:	bf 02 00 00 00 00 00 00	r2 = r0
      55:	77 02 00 00 20 00 00 00	r2 >>= 0x20
      56:	af 02 00 00 00 00 00 00	r2 ^= r0
;         cm->values[i][target_idx]++;
      57:	bf 25 00 00 00 00 00 00	r5 = r2
      58:	57 05 00 00 ff ff 00 00	r5 &= 0xffff
      59:	67 05 00 00 03 00 00 00	r5 <<= 0x3
      60:	79 a7 98 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x68)
      61:	bf 76 00 00 00 00 00 00	r6 = r7
      62:	0f 56 00 00 00 00 00 00	r6 += r5
      63:	79 65 00 00 00 00 00 00	r5 = *(u64 *)(r6 + 0x0)
      64:	07 05 00 00 01 00 00 00	r5 += 0x1
      65:	7b 56 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r5
      66:	77 02 00 00 0d 00 00 00	r2 >>= 0xd
      67:	57 02 00 00 f8 ff 07 00	r2 &= 0x7fff8
      68:	bf 75 00 00 00 00 00 00	r5 = r7
      69:	0f 25 00 00 00 00 00 00	r5 += r2
      70:	07 05 00 00 00 00 80 00	r5 += 0x800000
      71:	79 52 00 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x0)
      72:	07 02 00 00 01 00 00 00	r2 += 0x1
      73:	7b 25 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r2
      74:	bf 02 00 00 00 00 00 00	r2 = r0
      75:	77 02 00 00 1d 00 00 00	r2 >>= 0x1d
      76:	57 02 00 00 f8 ff 07 00	r2 &= 0x7fff8
      77:	bf 75 00 00 00 00 00 00	r5 = r7
      78:	0f 25 00 00 00 00 00 00	r5 += r2
      79:	07 05 00 00 00 00 00 01	r5 += 0x1000000
      80:	79 52 00 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x0)
      81:	07 02 00 00 01 00 00 00	r2 += 0x1
      82:	7b 25 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r2
      83:	77 00 00 00 2d 00 00 00	r0 >>= 0x2d
      84:	57 00 00 00 f8 ff 07 00	r0 &= 0x7fff8
      85:	bf 72 00 00 00 00 00 00	r2 = r7
      86:	0f 02 00 00 00 00 00 00	r2 += r0
      87:	07 02 00 00 00 00 80 01	r2 += 0x1800000
      88:	79 25 00 00 00 00 00 00	r5 = *(u64 *)(r2 + 0x0)
      89:	07 05 00 00 01 00 00 00	r5 += 0x1
      90:	7b 52 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r5
      91:	79 a6 a8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x58)
;             lentot += lens[i];
      92:	bf 62 00 00 00 00 00 00	r2 = r6
      93:	67 02 00 00 01 00 00 00	r2 <<= 0x1
      94:	bf a5 00 00 00 00 00 00	r5 = r10
      95:	07 05 00 00 f8 ff ff ff	r5 += -0x8
;             lentot += lens[i];
      96:	0f 25 00 00 00 00 00 00	r5 += r2
      97:	69 52 00 00 00 00 00 00	r2 = *(u16 *)(r5 + 0x0)
      98:	79 a5 b0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x50)
      99:	0f 52 00 00 00 00 00 00	r2 += r5
;     for( int i = 0; i < 4; i++ ) {
     100:	07 06 00 00 01 00 00 00	r6 += 0x1
     101:	15 06 c0 00 04 00 00 00	if r6 == 0x4 goto +0xc0 <LBB0_26>

0000000000000330 <LBB0_4>:
     102:	bf 25 00 00 00 00 00 00	r5 = r2
     103:	57 02 00 00 ff 1f 00 00	r2 &= 0x1fff
;             int ret = handle_pkt(data + (lentot & 0x1FFF), data_end, &pkt);
     104:	79 a0 a0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x60)
     105:	0f 20 00 00 00 00 00 00	r0 += r2
     106:	57 05 00 00 ff ff 00 00	r5 &= 0xffff
     107:	7b 5a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r5
;     if ((void *)(eth + 1) >= data_end){
     108:	bf 02 00 00 00 00 00 00	r2 = r0
     109:	07 02 00 00 0e 00 00 00	r2 += 0xe
     110:	79 a5 b8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x48)
     111:	2d 25 04 00 00 00 00 00	if r5 > r2 goto +0x4 <LBB0_6>
;         bpf_printk("eth + 1 >= data_end\n");
     112:	18 01 00 00 65 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x65 ll
     114:	b7 02 00 00 15 00 00 00	r2 = 0x15
     115:	05 00 89 00 00 00 00 00	goto +0x89 <LBB0_24>

00000000000003a0 <LBB0_6>:
;     __u16 h_proto = eth->h_proto;
     116:	71 02 0c 00 00 00 00 00	r2 = *(u8 *)(r0 + 0xc)
     117:	71 08 0d 00 00 00 00 00	r8 = *(u8 *)(r0 + 0xd)
     118:	67 08 00 00 08 00 00 00	r8 <<= 0x8
     119:	4f 28 00 00 00 00 00 00	r8 |= r2
;     switch (h_proto)
     120:	15 08 0a 00 08 00 00 00	if r8 == 0x8 goto +0xa <LBB0_8>
;         bpf_printk("eth\n");
     121:	18 01 00 00 7a 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x7a ll
     123:	b7 02 00 00 05 00 00 00	r2 = 0x5
     124:	85 00 00 00 06 00 00 00	call 0x6
;         bpf_printk("h_proto: %d\n", h_proto);
     125:	18 01 00 00 7f 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x7f ll
     127:	b7 02 00 00 0d 00 00 00	r2 = 0xd
     128:	bf 83 00 00 00 00 00 00	r3 = r8
     129:	85 00 00 00 06 00 00 00	call 0x6
     130:	05 00 7b 00 00 00 00 00	goto +0x7b <LBB0_25>

0000000000000418 <LBB0_8>:
;     if ((void *)(ip + 1) >= data_end )
     131:	bf 02 00 00 00 00 00 00	r2 = r0
     132:	07 02 00 00 22 00 00 00	r2 += 0x22
     133:	79 a5 b8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x48)
     134:	3d 52 77 00 00 00 00 00	if r2 >= r5 goto +0x77 <LBB0_25>
;     pkt->src_ip = ip->saddr;
     135:	61 02 1a 00 00 00 00 00	r2 = *(u32 *)(r0 + 0x1a)
     136:	63 2a e4 ff 00 00 00 00	*(u32 *)(r10 - 0x1c) = r2
;     pkt->dst_ip = ip->daddr;
     137:	61 02 1e 00 00 00 00 00	r2 = *(u32 *)(r0 + 0x1e)
     138:	63 2a e8 ff 00 00 00 00	*(u32 *)(r10 - 0x18) = r2
;     pkt->proto = ip->protocol;
     139:	71 02 17 00 00 00 00 00	r2 = *(u8 *)(r0 + 0x17)
     140:	73 2a f0 ff 00 00 00 00	*(u8 *)(r10 - 0x10) = r2
;     switch (ip->protocol)
     141:	15 02 64 00 11 00 00 00	if r2 == 0x11 goto +0x64 <LBB0_12>
     142:	55 02 6b 00 06 00 00 00	if r2 != 0x6 goto +0x6b <LBB0_23>
;         if (tcp + 1 > data_end)
     143:	bf 02 00 00 00 00 00 00	r2 = r0
     144:	07 02 00 00 36 00 00 00	r2 += 0x36
     145:	79 a5 b8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x48)
     146:	2d 52 6b 00 00 00 00 00	if r2 > r5 goto +0x6b <LBB0_25>

0000000000000498 <LBB0_14>:
     147:	7b 6a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r6
     148:	69 02 22 00 00 00 00 00	r2 = *(u16 *)(r0 + 0x22)
     149:	6b 2a ec ff 00 00 00 00	*(u16 *)(r10 - 0x14) = r2
     150:	69 02 24 00 00 00 00 00	r2 = *(u16 *)(r0 + 0x24)
     151:	6b 2a ee ff 00 00 00 00	*(u16 *)(r10 - 0x12) = r2
     152:	b7 02 00 00 0d 00 00 00	r2 = 0xd
     153:	bf a8 00 00 00 00 00 00	r8 = r10
     154:	07 08 00 00 e4 ff ff ff	r8 += -0x1c
     155:	18 06 00 00 1f 68 56 16 00 00 00 00 2f eb d4 27	r6 = 0x27d4eb2f1656681f ll

00000000000004e8 <LBB0_15>:
;     return (len >= 8) ? (finalize (rotl (h ^ fetch64 (p, 0), 27) * PRIME1 + PRIME4, p + 8, len - 8)) :
     157:	2d 21 2e 00 00 00 00 00	if r1 > r2 goto +0x2e <LBB0_18>
;     return (__u64)((__u8)(v[0]))|((__u64)((__u8)(v[1]))<<8)
     158:	71 80 01 00 00 00 00 00	r0 = *(u8 *)(r8 + 0x1)
     159:	67 00 00 00 08 00 00 00	r0 <<= 0x8
     160:	71 85 00 00 00 00 00 00	r5 = *(u8 *)(r8 + 0x0)
     161:	4f 50 00 00 00 00 00 00	r0 |= r5
;             |((__u64)((__u8)(v[2]))<<16)|((__u64)((__u8)(v[3]))<<24)
     162:	71 85 02 00 00 00 00 00	r5 = *(u8 *)(r8 + 0x2)
     163:	67 05 00 00 10 00 00 00	r5 <<= 0x10
     164:	4f 50 00 00 00 00 00 00	r0 |= r5
     165:	71 85 03 00 00 00 00 00	r5 = *(u8 *)(r8 + 0x3)
     166:	67 05 00 00 18 00 00 00	r5 <<= 0x18
     167:	4f 50 00 00 00 00 00 00	r0 |= r5
;             |((__u64)((__u8)(v[4]))<<32)|((__u64)((__u8)(v[5]))<<40)
     168:	71 85 04 00 00 00 00 00	r5 = *(u8 *)(r8 + 0x4)
     169:	67 05 00 00 20 00 00 00	r5 <<= 0x20
     170:	4f 50 00 00 00 00 00 00	r0 |= r5
     171:	71 85 05 00 00 00 00 00	r5 = *(u8 *)(r8 + 0x5)
     172:	67 05 00 00 28 00 00 00	r5 <<= 0x28
     173:	4f 50 00 00 00 00 00 00	r0 |= r5
;             |((__u64)((__u8)(v[6]))<<48)|((__u64)((__u8)(v[7]))<<56);
     174:	71 85 06 00 00 00 00 00	r5 = *(u8 *)(r8 + 0x6)
     175:	67 05 00 00 30 00 00 00	r5 <<= 0x30
     176:	4f 50 00 00 00 00 00 00	r0 |= r5
     177:	71 85 07 00 00 00 00 00	r5 = *(u8 *)(r8 + 0x7)
     178:	67 05 00 00 38 00 00 00	r5 <<= 0x38
     179:	4f 50 00 00 00 00 00 00	r0 |= r5
;     return ((x << r) | (x >> (64 - r)));
     180:	bf 05 00 00 00 00 00 00	r5 = r0
     181:	18 07 00 00 00 00 00 80 00 00 00 00 a7 75 ea 93	r7 = -0x6c158a5880000000 ll
     183:	2f 75 00 00 00 00 00 00	r5 *= r7
;     return rotl (v + p * PRIME2, 31) * PRIME1;
     184:	2f 30 00 00 00 00 00 00	r0 *= r3
;     return ((x << r) | (x >> (64 - r)));
     185:	77 00 00 00 21 00 00 00	r0 >>= 0x21
     186:	4f 50 00 00 00 00 00 00	r0 |= r5
;     return rotl (v + p * PRIME2, 31) * PRIME1;
     187:	2f 40 00 00 00 00 00 00	r0 *= r4
;     return (len >= 8) ? (finalize (rotl (h ^ fetch64 (p, 0), 27) * PRIME1 + PRIME4, p + 8, len - 8)) :
     188:	af 60 00 00 00 00 00 00	r0 ^= r6
;     return ((x << r) | (x >> (64 - r)));
     189:	bf 05 00 00 00 00 00 00	r5 = r0
     190:	77 05 00 00 25 00 00 00	r5 >>= 0x25
     191:	67 00 00 00 1b 00 00 00	r0 <<= 0x1b
     192:	4f 50 00 00 00 00 00 00	r0 |= r5
;     return (len >= 8) ? (finalize (rotl (h ^ fetch64 (p, 0), 27) * PRIME1 + PRIME4, p + 8, len - 8)) :
     193:	2f 40 00 00 00 00 00 00	r0 *= r4
     194:	18 05 00 00 63 ae b2 c2 00 00 00 00 77 ca eb 85	r5 = -0x7a1435883d4d519d ll
     196:	0f 50 00 00 00 00 00 00	r0 += r5
     197:	b7 07 00 00 f8 ff ff ff	r7 = -0x8
     198:	b7 05 00 00 08 00 00 00	r5 = 0x8

0000000000000638 <LBB0_17>:
     199:	bf 06 00 00 00 00 00 00	r6 = r0
     200:	0f 27 00 00 00 00 00 00	r7 += r2
     201:	0f 58 00 00 00 00 00 00	r8 += r5
     202:	bf 72 00 00 00 00 00 00	r2 = r7
     203:	05 00 d1 ff 00 00 00 00	goto -0x2f <LBB0_15>

0000000000000660 <LBB0_18>:
;             ((len >= 4) ? (finalize (rotl (h ^ fetch32 (p), 23) * PRIME2 + PRIME3, p + 4, len - 4)) :
     204:	2d 29 17 00 00 00 00 00	if r9 > r2 goto +0x17 <LBB0_20>
;         return (__u32)((__u8)(v[0]))|((__u32)((__u8)(v[1]))<<8)
     205:	71 80 01 00 00 00 00 00	r0 = *(u8 *)(r8 + 0x1)
     206:	67 00 00 00 08 00 00 00	r0 <<= 0x8
     207:	71 85 00 00 00 00 00 00	r5 = *(u8 *)(r8 + 0x0)
     208:	4f 50 00 00 00 00 00 00	r0 |= r5
;                |((__u32)((__u8)(v[2]))<<16)|((__u32)((__u8)(v[3]))<<24);
     209:	71 85 02 00 00 00 00 00	r5 = *(u8 *)(r8 + 0x2)
     210:	67 05 00 00 10 00 00 00	r5 <<= 0x10
     211:	4f 50 00 00 00 00 00 00	r0 |= r5
     212:	71 85 03 00 00 00 00 00	r5 = *(u8 *)(r8 + 0x3)
     213:	67 05 00 00 18 00 00 00	r5 <<= 0x18
     214:	4f 50 00 00 00 00 00 00	r0 |= r5
;     return (__u64)(endian32 (p)) * PRIME1;
     215:	2f 40 00 00 00 00 00 00	r0 *= r4
;             ((len >= 4) ? (finalize (rotl (h ^ fetch32 (p), 23) * PRIME2 + PRIME3, p + 4, len - 4)) :
     216:	af 60 00 00 00 00 00 00	r0 ^= r6
;     return ((x << r) | (x >> (64 - r)));
     217:	bf 05 00 00 00 00 00 00	r5 = r0
     218:	77 05 00 00 29 00 00 00	r5 >>= 0x29
     219:	67 00 00 00 17 00 00 00	r0 <<= 0x17
     220:	4f 50 00 00 00 00 00 00	r0 |= r5
;             ((len >= 4) ? (finalize (rotl (h ^ fetch32 (p), 23) * PRIME2 + PRIME3, p + 4, len - 4)) :
     221:	2f 30 00 00 00 00 00 00	r0 *= r3
     222:	18 05 00 00 f9 79 37 9e 00 00 00 00 b1 67 56 16	r5 = 0x165667b19e3779f9 ll
     224:	0f 50 00 00 00 00 00 00	r0 += r5
     225:	b7 07 00 00 fc ff ff ff	r7 = -0x4
     226:	b7 05 00 00 04 00 00 00	r5 = 0x4
     227:	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB0_17>

0000000000000720 <LBB0_20>:
;             ((len > 0) ? (finalize (rotl (h ^ fetch8 (p), 11) * PRIME1, p + 1, len - 1)) :
     228:	15 02 47 ff 00 00 00 00	if r2 == 0x0 goto -0xb9 <LBB0_22>
;     return (__u8)(*p) * PRIME5;
     229:	71 80 00 00 00 00 00 00	r0 = *(u8 *)(r8 + 0x0)
     230:	18 05 00 00 c5 67 56 16 00 00 00 00 2f eb d4 27	r5 = 0x27d4eb2f165667c5 ll
     232:	2f 50 00 00 00 00 00 00	r0 *= r5
;             ((len > 0) ? (finalize (rotl (h ^ fetch8 (p), 11) * PRIME1, p + 1, len - 1)) :
     233:	af 60 00 00 00 00 00 00	r0 ^= r6
;     return ((x << r) | (x >> (64 - r)));
     234:	bf 05 00 00 00 00 00 00	r5 = r0
     235:	77 05 00 00 35 00 00 00	r5 >>= 0x35
     236:	67 00 00 00 0b 00 00 00	r0 <<= 0xb
     237:	4f 50 00 00 00 00 00 00	r0 |= r5
;             ((len > 0) ? (finalize (rotl (h ^ fetch8 (p), 11) * PRIME1, p + 1, len - 1)) :
     238:	2f 40 00 00 00 00 00 00	r0 *= r4
     239:	b7 07 00 00 ff ff ff ff	r7 = -0x1
     240:	b7 05 00 00 01 00 00 00	r5 = 0x1
     241:	05 00 d5 ff 00 00 00 00	goto -0x2b <LBB0_17>

0000000000000790 <LBB0_12>:
;         if ((void *)(udp + 1) > data_end){
     242:	bf 02 00 00 00 00 00 00	r2 = r0
     243:	07 02 00 00 2a 00 00 00	r2 += 0x2a
     244:	79 a5 b8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x48)
     245:	3d 25 9d ff 00 00 00 00	if r5 >= r2 goto -0x63 <LBB0_14>
;             bpf_printk("udp\n");
     246:	18 01 00 00 8c 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x8c ll
     248:	b7 02 00 00 05 00 00 00	r2 = 0x5
     249:	05 00 03 00 00 00 00 00	goto +0x3 <LBB0_24>

00000000000007d0 <LBB0_23>:
;         bpf_printk("proto\n");
     250:	18 01 00 00 91 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x91 ll
     252:	b7 02 00 00 07 00 00 00	r2 = 0x7

00000000000007e8 <LBB0_24>:
     253:	85 00 00 00 06 00 00 00	call 0x6

00000000000007f0 <LBB0_25>:
;                 bpf_printk("valid: %d\n", bpf_ntohs(md->valid));
     254:	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     255:	69 13 00 00 00 00 00 00	r3 = *(u16 *)(r1 + 0x0)
     256:	dc 03 00 00 10 00 00 00	r3 = be16 r3
     257:	18 01 00 00 0f 00 00 00 00 00 00 00 00 00 00 00	r1 = 0xf ll
     259:	b7 02 00 00 0b 00 00 00	r2 = 0xb
     260:	85 00 00 00 06 00 00 00	call 0x6
     261:	79 a1 78 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x88)
;                 bpf_printk("lens: %d %d %d %d\n", lens[0], lens[1], lens[2], lens[3]);
     262:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
     263:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     264:	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
     265:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     266:	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
     267:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     268:	bf a3 00 00 00 00 00 00	r3 = r10
     269:	07 03 00 00 c0 ff ff ff	r3 += -0x40
;                 bpf_printk("lens: %d %d %d %d\n", lens[0], lens[1], lens[2], lens[3]);
     270:	18 01 00 00 1a 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x1a ll
     272:	b7 02 00 00 13 00 00 00	r2 = 0x13
     273:	b7 04 00 00 20 00 00 00	r4 = 0x20
     274:	85 00 00 00 b1 00 00 00	call 0xb1
;                 bpf_printk("handle_pkt failed at i %d\n", i);
     275:	18 01 00 00 2d 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x2d ll
     277:	b7 02 00 00 1b 00 00 00	r2 = 0x1b
     278:	bf 63 00 00 00 00 00 00	r3 = r6
     279:	85 00 00 00 06 00 00 00	call 0x6
;                 bpf_printk("len %d lens[i]%d, lentot %d\n",i, lens[i], lentot);
     280:	bf 61 00 00 00 00 00 00	r1 = r6
     281:	67 01 00 00 20 00 00 00	r1 <<= 0x20
     282:	77 01 00 00 20 00 00 00	r1 >>= 0x20
     283:	67 01 00 00 01 00 00 00	r1 <<= 0x1
     284:	bf a2 00 00 00 00 00 00	r2 = r10
     285:	07 02 00 00 f8 ff ff ff	r2 += -0x8
;                 bpf_printk("len %d lens[i]%d, lentot %d\n",i, lens[i], lentot);
     286:	0f 12 00 00 00 00 00 00	r2 += r1
     287:	69 24 00 00 00 00 00 00	r4 = *(u16 *)(r2 + 0x0)
     288:	18 01 00 00 48 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x48 ll
     290:	b7 02 00 00 1d 00 00 00	r2 = 0x1d
     291:	bf 63 00 00 00 00 00 00	r3 = r6
     292:	79 a5 b0 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x50)
     293:	85 00 00 00 06 00 00 00	call 0x6

0000000000000930 <LBB0_26>:
; }
     294:	b7 00 00 00 11 11 00 00	r0 = 0x1111
     295:	95 00 00 00 00 00 00 00	exit
